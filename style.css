document.addEventListener('DOMContentLoaded', () => {
    const calendarGrid = document.getElementById('calendarGrid');
    const currentMonthEl = document.getElementById('currentMonth');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    // ポップアップ関連の要素
    const timeModal = document.getElementById('timeModal');
    const modalDateEl = document.getElementById('modalDate');
    const bathTimeInput = document.getElementById('bathTime');
    const saveTimeBtn = document.getElementById('saveTimeBtn');
    const deleteTimeBtn = document.getElementById('deleteTimeBtn');
    const closeButton = document.querySelector('.close-button');

    let currentDate = new Date();
    let selectedDayEl = null;

    // 予定を保存するためのオブジェクト
    const bathTimes = {};

    const renderCalendar = () => {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        currentMonthEl.textContent = `${year}年 ${month + 1}月`;
        calendarGrid.innerHTML = '';

        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        
        const firstDayOfWeek = firstDayOfMonth.getDay();
        const totalDays = lastDayOfMonth.getDate();

        for (let i = 0; i < firstDayOfWeek; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.classList.add('day', 'prev-month');
            calendarGrid.appendChild(emptyDay);
        }

        for (let day = 1; day <= totalDays; day++) {
            const dayEl = document.createElement('div');
            dayEl.classList.add('day');
            dayEl.innerHTML = `<span class="day-number">${day}</span>`;
            dayEl.dataset.date = `${year}-${month + 1}-${day}`;
            
            // 予定がある場合は表示
            const dateKey = dayEl.dataset.date;
            if (bathTimes[dateKey]) {
                const bathTimeEl = document.createElement('div');
                bathTimeEl.classList.add('bath-time');
                bathTimeEl.textContent = bathTimes[dateKey];
                dayEl.appendChild(bathTimeEl);
            }

            dayEl.addEventListener('click', () => {
                openTimeModal(dayEl);
            });

            calendarGrid.appendChild(dayEl);
        }
    };

    const openTimeModal = (dayElement) => {
        selectedDayEl = dayElement;
        const dateKey = dayElement.dataset.date;
        modalDateEl.textContent = `${dateKey}`;
        
        // 既存の予定があれば、時間を入力欄にセット
        if (bathTimes[dateKey]) {
            bathTimeInput.value = bathTimes[dateKey];
            deleteTimeBtn.style.display = 'block';
        } else {
            bathTimeInput.value = '19:00'; // デフォルト値
            deleteTimeBtn.style.display = 'none';
        }
        
        timeModal.style.display = 'flex';
    };

    const closeTimeModal = () => {
        timeModal.style.display = 'none';
    };

    // 保存ボタンのイベント
    saveTimeBtn.addEventListener('click', () => {
        const dateKey = selectedDayEl.dataset.date;
        const time = bathTimeInput.value;
        
        if (time) {
            bathTimes[dateKey] = time;
        } else {
            delete bathTimes[dateKey];
        }
        
        renderCalendar();
        closeTimeModal();
    });

    // 削除ボタンのイベント
    deleteTimeBtn.addEventListener('click', () => {
        const dateKey = selectedDayEl.dataset.date;
        delete bathTimes[dateKey];
        
        renderCalendar();
        closeTimeModal();
    });

    // 閉じるボタンとモーダル外のクリックで閉じる
    closeButton.addEventListener('click', closeTimeModal);
    window.addEventListener('click', (event) => {
        if (event.target === timeModal) {
            closeTimeModal();
        }
    });

    prevBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    });

    nextBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    });

    renderCalendar();
});
